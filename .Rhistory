y_hosp_cell$div <- y_hosp_cell$share_h/(1-y_hosp_cell$share_m)
# Calculate predicted hospital-cell admissions after hospital k exclusion
system_hosp <- sort(unique(y_hosp_cell$hosp_id[y_hosp_cell$party_sys_id == m]))
for (k in system_hosp) {
print(paste0("Hosp Id: ", k))
iter <- iter + 1
y_hosp_cell$N_k <- 0
y_hosp_cell$N_k[y_hosp_cell$hosp_id == k] <- y_hosp_cell$N_h[y_hosp_cell$hosp_id == k]
y_hosp_cell$N_k <- ave(y_hosp_cell$N_k,y_hosp_cell$cell, FUN = max)
y_hosp_cell$N_h_predict <- y_hosp_cell$N_h + y_hosp_cell$N_k*y_hosp_cell$div
y_hosp_cell$N_h_predict[y_hosp_cell$party_sys_id == m] <- 0
# Sum across cells
y_hosp = aggregate(D$adm,by=list(D$hosp_id,D$hospital,D$party_sys_id,D$sys_id),sum)
names(y_hosp) <- c("hosp_id","hospital","party_sys_id","sys_id","N_h")
y_hosp$N_k <- 0
y_hosp$N_k[y_hosp$hosp_id == k] <- y_hosp$N_h[y_hosp$hosp_id == k]
y_hosp$N_k <- max(y_hosp$N_k)
temp <- aggregate(y_hosp_cell$N_h_predict,by=list(y_hosp_cell$hosp_id),sum)
names(temp) <- c("hosp_id","N_h_predict")
y_hosp <- merge(y_hosp,temp)
# Calculate hospital diversion ratios - two options for denom
if (dropDegenerateCell == FALSE) {
y_hosp$div <- (y_hosp$N_h_predict-y_hosp$N_h)/y_hosp$N_k
}
if (dropDegenerateCell == TRUE) {
y_hosp$movers <- y_hosp$N_h_predict - y_hosp$N_h
y_hosp$N_k_alt <- sum(y_hosp$movers[y_hosp$movers>0])
y_hosp$div <- (y_hosp$N_h_predict-y_hosp$N_h)/y_hosp$N_k_alt
}
y_hosp$div[y_hosp$party_sys_id == m] <- NA
# Print flag if degenerate cells
degenlist <- y_hosp_cell$cell[is.na(y_hosp_cell$div) & y_hosp_cell$hosp_id == k]
if (length(degenlist) > 0) {
print("Note the following cells are degenerate:")
print(degenlist)
totdiv <- sum(y_hosp$div, na.rm = TRUE)
print(paste0("Total Diversion: ",totdiv))
}
if (iter == 1) {out <- subset(y_hosp, select=c(hosp_id,hospital,party_sys_id,sys_id,N_h))}
#out[,paste0("div_",m,"_",k)] <- y_hosp$div
out[,paste0("div_from_",k)] <- y_hosp$div
}
}
# sort for return of hospital-level diversions
out$party_sys_id[out$party_sys_id == 0] <- NA
out <- out[order(out$party_sys_id,out$sys_id,out$hosp_id),]
# also calculate system-level diversion
out2 <- out
party_sys_list <- sort(unique(out$party_sys_id[!is.na(out$party_sys_id)]))
for (m in party_sys_list) {
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$party_sys_id==m & !is.na(out2$party_sys_id)]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct, nrow = length(ct))))  / (sum(ct))
out2[varnames] <- NULL
}
hosp_id
rm(list=ls())
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
result <- div_calc(D1, hosp_id = "hosp_id2")
DR <- result$hosp_level
print(result$sys_level)
rm(list=ls())
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
#### Test with a different name for variables
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "system"] <- "sys_name"
names(D1)[names(D1) == "party_ind"] <- "in_party"
result <- div_calc(D1, hosp_id = "hosp_id2", system = "sys_name", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
print(result$hosp_level)
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
D1$system <- NULL
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
rm(list=ls())
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
#### Test with a different name for variables
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
D1$system <- NULL
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
# testfxn <- function(D, hosp_id = "hosp_id") {
#   print(names(D))
#
#   names(D)[names(D) == hosp_id] <- "hosp_id"
#
#   print(names(D))
# }
#
# D1 <- D0
# names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
# testfxn(D1)
# testfxn(D1, hosp_id = "hosp_id2")
##### Test with a degenerate cell
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 30] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
########################
###### Testing wtp_calc
########################
D0$weight <- 1
out <- wtp_calc(D0)
y_pre <- subset(out, party == 1)
D0_post <- D0
D0_post$sys_id[D0_post$party_ind == 1] <- 1
out <- wtp_calc(D0_post)
y_post <- subset(out, party == 1)
y_pre <- aggregate(list(WTP_s = y_pre$WTP_s, WTP_s_wt = y_pre$WTP_s_wt, N_s=y_pre$N_s),by=list(y_party=y_pre$party),sum)
print("% Change in WTP")
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100)
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
#### Test with a different name for variables
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
D1$system <- NULL
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
##### Test with a degenerate cell
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 30] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
table(D1$cell)
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 1] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
table(D1$cell)
View(D1)
D1 <- D0
D1$cell[D1$cell == 1] <- 999
D1$hosp_id[D1$cell == 999] <- 3
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
D1 <- D0
View(D1)
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 29] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
devtools::document()
devtools::build_manual()
devtools::build()
devtools::build_manual()
devtools::build_vignettes()
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
class(discharge_data)
is(discharge_data,"data.frame")
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
scalar <- 5
outList <- cell_defn(scalar,th,layers)
class(th)
class(scalar)
class(layers)
length(th)
length(th) == 1
length(th) != 1
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
scalar <- 5
outList <- cell_defn(scalar,th,layers)
outList <- cell_defn(discharge_data,s_min = "th",layers)
outList <- cell_defn(discharge_data,c(20,25),layers)
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
### Check the error checks
scalar <- 5
outList <- cell_defn(scalar,th,layers)
outList <- cell_defn(discharge_data,s_min = "th",layers)
outList <- cell_defn(discharge_data,c(20,25),layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
