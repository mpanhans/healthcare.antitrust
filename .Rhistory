###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
##### Test with a degenerate cell
D0$cell[D0$hosp_id == 3 & D0$cell == 30] <- 999
D0$party_ind[D0$hosp_id==3] <- 1
D <- D0
check <- unique(subset(D,select=c(hosp_id,hospital)))
if (length(unique(check$hosp_id)) != length(check$hosp_id)) {warning('Error: hosp_id associated with multiple hospital names')}
#if (length(unique(check$hospital)) != length(check$hospital)) {warning('Error: hospital name associated with multiple hosp_ids')}
if (!"cell" %in% names(D)) {warning('Variable "cell" required in input dataset'); stop()}
if (!"hosp_id" %in% names(D)) {warning('Variable "hosp_id" required in input dataset'); stop()}
if (!"hospital" %in% names(D)) {warning('Variable "hospital" required in input dataset'); stop()}
if (!"sys_id" %in% names(D)) {warning('Variable "sys_id" required in input dataset'); stop()}
#if (!"system" %in% names(D)) {warning('Variable "system" required in input dataset'); stop()}
if (!"party_ind" %in% names(D)) {warning('Variable "party_ind" required in input dataset'); stop()}
if (!"adm" %in% names(D)) {warning('Variable "adm" required in input dataset'); stop()}
iter <- 0
D$party_sys_id <- D$party_ind*D$sys_id
party_sys_list <- sort(unique(D$party_sys_id[D$party_sys_id > 0]))
for (m in party_sys_list) {
# Calculate cell-specific hospital diversion ratios
y_hosp_cell = aggregate(D$adm,by=list(D$cell,D$hosp_id,D$hospital,D$party_sys_id),sum)
names(y_hosp_cell) <- c("cell","hosp_id","hospital","party_sys_id","N_h")
y_hosp_cell$N <- ave(y_hosp_cell$N_h,y_hosp_cell$cell, FUN = sum)
y_hosp_cell$share_h <- y_hosp_cell$N_h/y_hosp_cell$N
y_hosp_cell$share_m <- ave(y_hosp_cell$share_h,y_hosp_cell$cell, y_hosp_cell$party_sys_id, FUN = sum)
y_hosp_cell$share_m[y_hosp_cell$party_sys_id != m] <- 0
y_hosp_cell$share_m <- ave(y_hosp_cell$share_m,y_hosp_cell$cell, FUN = max)
y_hosp_cell$share_h[y_hosp_cell$party_sys_id == m] <- 0 # set share to zero for system hospitals
y_hosp_cell$div <- y_hosp_cell$share_h/(1-y_hosp_cell$share_m)
# Calculate predicted hospital-cell admissions after hospital k exclusion
system_hosp <- sort(unique(y_hosp_cell$hosp_id[y_hosp_cell$party_sys_id == m]))
for (k in system_hosp) {
print(paste0("Hosp Id: ", k))
iter <- iter + 1
y_hosp_cell$N_k <- 0
y_hosp_cell$N_k[y_hosp_cell$hosp_id == k] <- y_hosp_cell$N_h[y_hosp_cell$hosp_id == k]
y_hosp_cell$N_k <- ave(y_hosp_cell$N_k,y_hosp_cell$cell, FUN = max)
y_hosp_cell$N_h_predict <- y_hosp_cell$N_h + y_hosp_cell$N_k*y_hosp_cell$div
y_hosp_cell$N_h_predict[y_hosp_cell$party_sys_id == m] <- 0
# Sum across cells
y_hosp = aggregate(D$adm,by=list(D$hosp_id,D$hospital,D$party_sys_id,D$sys_id),sum)
names(y_hosp) <- c("hosp_id","hospital","party_sys_id","sys_id","N_h")
y_hosp$N_k <- 0
y_hosp$N_k[y_hosp$hosp_id == k] <- y_hosp$N_h[y_hosp$hosp_id == k]
y_hosp$N_k <- max(y_hosp$N_k)
temp <- aggregate(y_hosp_cell$N_h_predict,by=list(y_hosp_cell$hosp_id),sum)
names(temp) <- c("hosp_id","N_h_predict")
y_hosp <- merge(y_hosp,temp)
# Calculate hospital diversion ratios - two options for denom
if (dropDegenerateCell == FALSE) {
y_hosp$div <- (y_hosp$N_h_predict-y_hosp$N_h)/y_hosp$N_k
}
if (dropDegenerateCell == TRUE) {
y_hosp$movers <- y_hosp$N_h_predict - y_hosp$N_h
y_hosp$N_k_alt <- sum(y_hosp$movers[y_hosp$movers>0])
y_hosp$div <- (y_hosp$N_h_predict-y_hosp$N_h)/y_hosp$N_k_alt
}
y_hosp$div[y_hosp$party_sys_id == m] <- NA
# Print flag if degenerate cells
degenlist <- y_hosp_cell$cell[is.na(y_hosp_cell$div) & y_hosp_cell$hosp_id == k]
if (length(degenlist) > 0) {
print("Note the following cells are degenerate:")
print(degenlist)
totdiv <- sum(y_hosp$div, na.rm = TRUE)
print(paste0("Total Diversion: ",totdiv))
}
if (iter == 1) {out <- subset(y_hosp, select=c(hosp_id,hospital,party_sys_id,sys_id,N_h))}
#out[,paste0("div_",m,"_",k)] <- y_hosp$div
out[,paste0("div_from_",k)] <- y_hosp$div
}
}
dropDegenerateCell = TRUE
check <- unique(subset(D,select=c(hosp_id,hospital)))
if (length(unique(check$hosp_id)) != length(check$hosp_id)) {warning('Error: hosp_id associated with multiple hospital names')}
#if (length(unique(check$hospital)) != length(check$hospital)) {warning('Error: hospital name associated with multiple hosp_ids')}
if (!"cell" %in% names(D)) {warning('Variable "cell" required in input dataset'); stop()}
if (!"hosp_id" %in% names(D)) {warning('Variable "hosp_id" required in input dataset'); stop()}
if (!"hospital" %in% names(D)) {warning('Variable "hospital" required in input dataset'); stop()}
if (!"sys_id" %in% names(D)) {warning('Variable "sys_id" required in input dataset'); stop()}
#if (!"system" %in% names(D)) {warning('Variable "system" required in input dataset'); stop()}
if (!"party_ind" %in% names(D)) {warning('Variable "party_ind" required in input dataset'); stop()}
if (!"adm" %in% names(D)) {warning('Variable "adm" required in input dataset'); stop()}
iter <- 0
D$party_sys_id <- D$party_ind*D$sys_id
party_sys_list <- sort(unique(D$party_sys_id[D$party_sys_id > 0]))
for (m in party_sys_list) {
# Calculate cell-specific hospital diversion ratios
y_hosp_cell = aggregate(D$adm,by=list(D$cell,D$hosp_id,D$hospital,D$party_sys_id),sum)
names(y_hosp_cell) <- c("cell","hosp_id","hospital","party_sys_id","N_h")
y_hosp_cell$N <- ave(y_hosp_cell$N_h,y_hosp_cell$cell, FUN = sum)
y_hosp_cell$share_h <- y_hosp_cell$N_h/y_hosp_cell$N
y_hosp_cell$share_m <- ave(y_hosp_cell$share_h,y_hosp_cell$cell, y_hosp_cell$party_sys_id, FUN = sum)
y_hosp_cell$share_m[y_hosp_cell$party_sys_id != m] <- 0
y_hosp_cell$share_m <- ave(y_hosp_cell$share_m,y_hosp_cell$cell, FUN = max)
y_hosp_cell$share_h[y_hosp_cell$party_sys_id == m] <- 0 # set share to zero for system hospitals
y_hosp_cell$div <- y_hosp_cell$share_h/(1-y_hosp_cell$share_m)
# Calculate predicted hospital-cell admissions after hospital k exclusion
system_hosp <- sort(unique(y_hosp_cell$hosp_id[y_hosp_cell$party_sys_id == m]))
for (k in system_hosp) {
print(paste0("Hosp Id: ", k))
iter <- iter + 1
y_hosp_cell$N_k <- 0
y_hosp_cell$N_k[y_hosp_cell$hosp_id == k] <- y_hosp_cell$N_h[y_hosp_cell$hosp_id == k]
y_hosp_cell$N_k <- ave(y_hosp_cell$N_k,y_hosp_cell$cell, FUN = max)
y_hosp_cell$N_h_predict <- y_hosp_cell$N_h + y_hosp_cell$N_k*y_hosp_cell$div
y_hosp_cell$N_h_predict[y_hosp_cell$party_sys_id == m] <- 0
# Sum across cells
y_hosp = aggregate(D$adm,by=list(D$hosp_id,D$hospital,D$party_sys_id,D$sys_id),sum)
names(y_hosp) <- c("hosp_id","hospital","party_sys_id","sys_id","N_h")
y_hosp$N_k <- 0
y_hosp$N_k[y_hosp$hosp_id == k] <- y_hosp$N_h[y_hosp$hosp_id == k]
y_hosp$N_k <- max(y_hosp$N_k)
temp <- aggregate(y_hosp_cell$N_h_predict,by=list(y_hosp_cell$hosp_id),sum)
names(temp) <- c("hosp_id","N_h_predict")
y_hosp <- merge(y_hosp,temp)
# Calculate hospital diversion ratios - two options for denom
if (dropDegenerateCell == FALSE) {
y_hosp$div <- (y_hosp$N_h_predict-y_hosp$N_h)/y_hosp$N_k
}
if (dropDegenerateCell == TRUE) {
y_hosp$movers <- y_hosp$N_h_predict - y_hosp$N_h
y_hosp$N_k_alt <- sum(y_hosp$movers[y_hosp$movers>0])
y_hosp$div <- (y_hosp$N_h_predict-y_hosp$N_h)/y_hosp$N_k_alt
}
y_hosp$div[y_hosp$party_sys_id == m] <- NA
# Print flag if degenerate cells
degenlist <- y_hosp_cell$cell[is.na(y_hosp_cell$div) & y_hosp_cell$hosp_id == k]
if (length(degenlist) > 0) {
print("Note the following cells are degenerate:")
print(degenlist)
totdiv <- sum(y_hosp$div, na.rm = TRUE)
print(paste0("Total Diversion: ",totdiv))
}
if (iter == 1) {out <- subset(y_hosp, select=c(hosp_id,hospital,party_sys_id,sys_id,N_h))}
#out[,paste0("div_",m,"_",k)] <- y_hosp$div
out[,paste0("div_from_",k)] <- y_hosp$div
}
}
out$party_sys_id[out$party_sys_id == 0] <- NA
out <- out[order(out$party_sys_id,out$sys_id,out$hosp_id),]
View(out)
out2 <- out
party_sys_list <- sort(unique(out$party_sys_id[!is.na(out$party_sys_id)]))
for (m in party_sys_list) {
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$sys_id==m]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct)))  / (sum(ct))
}
out2 <- out
party_sys_list <- sort(unique(out$party_sys_id[!is.na(out$party_sys_id)]))
party_sys_list
M <- 1
m <- 1
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
party_hosp_list
ct <- out$N_h[out2$sys_id==m]
ct
varnames <- paste("div_from_", party_hosp_list, sep="")
varnames
rowSums(as.matrix(out[varnames])
)
as.matrix(out[varnames])
diag(ct)
s.matrix(out[varnames]) %*% diag(ct)
as.matrix(out[varnames]) %*% diag(ct)
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct)))  / (sum(ct))
party_sys_list
m <- 3
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$sys_id==m]
varnames <- paste("div_from_", party_hosp_list, sep="")
ct
View(out)
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$party_sys_id==m]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct)))  / (sum(ct))
ct
ct <- out$N_h[out2$party_sys_id==m & !is.na(out2$party_sys_id)]
ct
out2 <- out
party_sys_list <- sort(unique(out$party_sys_id[!is.na(out$party_sys_id)]))
for (m in party_sys_list) {
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$party_sys_id==m & !is.na(out2$party_sys_id)]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct)))  / (sum(ct))
}
View(out2)
out2 <- out
party_sys_list <- sort(unique(out$party_sys_id[!is.na(out$party_sys_id)]))
party_sys_list
m <- 1
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$party_sys_id==m & !is.na(out2$party_sys_id)]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct)))  / (sum(ct))
m <- 3
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$party_sys_id==m & !is.na(out2$party_sys_id)]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct)))  / (sum(ct))
out[varnames]
as.matrix(out[varnames])
as.matrix(out[varnames]) %*% diag(ct)
diag(ct)
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct, nrow = length(ct))))
party_sys_list
m <- 5
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$party_sys_id==m & !is.na(out2$party_sys_id)]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct, nrow = length(ct))))  / (sum(ct))
View(out2)
varnames
out2$varnames[1]
varnames[1]
out2[varnames]
out2 <- out
party_sys_list <- sort(unique(out$party_sys_id[!is.na(out$party_sys_id)]))
for (m in party_sys_list) {
party_hosp_list <- sort(unique(out$hosp_id[out$party_sys_id==m]))
ct <- out$N_h[out2$party_sys_id==m & !is.na(out2$party_sys_id)]
varnames <- paste("div_from_", party_hosp_list, sep="")
out2[,paste0("div_from_sys_",m)] <- (rowSums(as.matrix(out[varnames]) %*% diag(ct, nrow = length(ct))))  / (sum(ct))
out2[varnames] <- NULL
}
View(out2)
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
D0$cell[D0$hosp_id == 3 & D0$cell == 30] <- 999
D0$party_ind[D0$hosp_id==3] <- 1
result <- div_calc(D0, dropDegenerateCell = FALSE)
result <- div_calc(D0, dropDegenerateCell = TRUE)
DR <- result$hosp_level
devtools::build()
devtools::build()
devtools::build()
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
devtools::build()
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(healthcare.antitrust)
data(discharge_data, package = "healthcare.antitrust")
list1 <- c("drg","age","zip5")
layers <- list(list1)
th <- 15
discharge_data$adm <- 1
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
D0 <- as.data.frame(outList[1])
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
out <- div_calc(D0)
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(healthcare.antitrust)
data(discharge_data, package = "healthcare.antitrust")
list1 <- c("drg","age","zip5")
layers <- list(list1)
th <- 15
discharge_data$adm <- 1
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
out <- div_calc(D0)
divratio_hosp <- out$hosp_level
sum(divratio_hosp$div_from_1, na.rm = TRUE)
print(out$hosp_level)
print(out$sys_level)
devtools::build()
devtools::load_all()
install.packages("~/Projects/R_packages/healthcare.antitrust_0.1.1.tar.gz", repos = NULL, type = "source")
devtools::build_manual()
devtools::build()
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
devtools::build()
devtools::build_manual()
install.packages("~/Projects/R_packages/healthcare.antitrust_0.1.1.tar.gz", repos = NULL, type = "source")
devtools::build()
devtools::build_manual()
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
D <- D0
dropDegenerateCell = TRUE
sampleWithReplacement = FALSE
check <- unique(subset(D,select=c(hosp_id,hospital)))
if (length(unique(check$hosp_id)) != length(check$hosp_id)) {warning('Error: hosp_id associated with multiple hospital names')}
#if (length(unique(check$hospital)) != length(check$hospital)) {warning('Error: hospital name associated with multiple hosp_ids')}
if (!"cell" %in% names(D)) {warning('Variable "cell" required in input dataset'); stop()}
if (!"hosp_id" %in% names(D)) {warning('Variable "hosp_id" required in input dataset'); stop()}
if (!"hospital" %in% names(D)) {warning('Variable "hospital" required in input dataset'); stop()}
if (!"sys_id" %in% names(D)) {warning('Variable "sys_id" required in input dataset'); stop()}
#if (!"system" %in% names(D)) {warning('Variable "system" required in input dataset'); stop()}
if (!"party_ind" %in% names(D)) {warning('Variable "party_ind" required in input dataset'); stop()}
if (!"adm" %in% names(D)) {warning('Variable "adm" required in input dataset'); stop()}
iter <- 0
D$party_sys_id <- D$party_ind*D$sys_id
party_sys_list <- sort(unique(D$party_sys_id[D$party_sys_id > 0]))
party_sys_list
m <- 1
View(D)
table(D$cell)
table(D$cell_type)
