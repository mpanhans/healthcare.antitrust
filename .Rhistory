D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
D0$cell[D0$hosp_id == 3 & D0$cell == 30] <- 999
D0$party_ind[D0$hosp_id==3] <- 1
result <- div_calc(D0, dropDegenerateCell = FALSE)
result <- div_calc(D0, dropDegenerateCell = TRUE)
DR <- result$hosp_level
devtools::build()
devtools::build()
devtools::build()
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
devtools::build()
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(healthcare.antitrust)
data(discharge_data, package = "healthcare.antitrust")
list1 <- c("drg","age","zip5")
layers <- list(list1)
th <- 15
discharge_data$adm <- 1
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
D0 <- as.data.frame(outList[1])
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
out <- div_calc(D0)
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(healthcare.antitrust)
data(discharge_data, package = "healthcare.antitrust")
list1 <- c("drg","age","zip5")
layers <- list(list1)
th <- 15
discharge_data$adm <- 1
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
out <- div_calc(D0)
divratio_hosp <- out$hosp_level
sum(divratio_hosp$div_from_1, na.rm = TRUE)
print(out$hosp_level)
print(out$sys_level)
devtools::build()
devtools::load_all()
install.packages("~/Projects/R_packages/healthcare.antitrust_0.1.1.tar.gz", repos = NULL, type = "source")
devtools::build_manual()
devtools::build()
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
devtools::build()
devtools::build_manual()
install.packages("~/Projects/R_packages/healthcare.antitrust_0.1.1.tar.gz", repos = NULL, type = "source")
devtools::build()
devtools::build_manual()
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
D <- D0
dropDegenerateCell = TRUE
sampleWithReplacement = FALSE
check <- unique(subset(D,select=c(hosp_id,hospital)))
if (length(unique(check$hosp_id)) != length(check$hosp_id)) {warning('Error: hosp_id associated with multiple hospital names')}
#if (length(unique(check$hospital)) != length(check$hospital)) {warning('Error: hospital name associated with multiple hosp_ids')}
if (!"cell" %in% names(D)) {warning('Variable "cell" required in input dataset'); stop()}
if (!"hosp_id" %in% names(D)) {warning('Variable "hosp_id" required in input dataset'); stop()}
if (!"hospital" %in% names(D)) {warning('Variable "hospital" required in input dataset'); stop()}
if (!"sys_id" %in% names(D)) {warning('Variable "sys_id" required in input dataset'); stop()}
#if (!"system" %in% names(D)) {warning('Variable "system" required in input dataset'); stop()}
if (!"party_ind" %in% names(D)) {warning('Variable "party_ind" required in input dataset'); stop()}
if (!"adm" %in% names(D)) {warning('Variable "adm" required in input dataset'); stop()}
iter <- 0
D$party_sys_id <- D$party_ind*D$sys_id
party_sys_list <- sort(unique(D$party_sys_id[D$party_sys_id > 0]))
party_sys_list
m <- 1
View(D)
table(D$cell)
table(D$cell_type)
devtools::load_all()
# rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
##### Test with a degenerate cell
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 30] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
D <- D0
D$weight <- 1
D$totalweight <- D$weight*D$adm  # in case some obs are aggregated admissions
y_cell <- aggregate(list(N_s=D$adm, wt = D$totalweight),by=list(cell=D$cell, sys_id=D$sys_id,party=D$party),sum)
y_cell <- y_cell[order(y_cell$cell,y_cell$sys_id),]
y_cell$N <- ave(y_cell$N_s,y_cell$cell, FUN = sum)
y_cell$share_s <- y_cell$N_s/y_cell$N
y_cell$wt <- ave(y_cell$wt,y_cell$cell, FUN = sum)
y_cell$wt <- y_cell$wt/y_cell$N
y_cell$share_s[y_cell$share_s > .99] <- .99
y_cell$WTP_s <- log(1/(1-y_cell$share_s))*y_cell$N
y_cell$WTP_s_wt <- log(1/(1-y_cell$share_s))*y_cell$N*y_cell$wt
y <- aggregate(list(WTP_s=y_cell$WTP_s, N_s=y_cell$N_s, WTP_s_wt=y_cell$WTP_s_wt),by=list(party=y_cell$party,sys_id=y_cell$sys_id),sum)
y1 <- calc_wtp(D0)
y1 <- wtp_calc(D0)
wtp_calc(D0)
D0$weight <- 1
y1 <- wtp_calc(D0)
View(y1)
y_pre <- subset(y1, party == 1)
View(y_pre)
View(y_pre)
table(D0$sys_id)
View(y_pre)
D0_post <- D0
View(D0_post)
temp <- unique(c(D0$hosp_id,D0$sys_id))
temp
temp <- c(D0$hosp_id,D0$sys_id)
temp <- rbind(D0$hosp_id,D0$sys_id)
View(temp)
temp <- subset(D0, select = c(hosp_id, sys_id)
)
View(temp)
unique(temp)
table(D0_post$hosp_id[D0_post$party_ind==1])
table(D0_post$sys_id[D0_post$party_ind==1])
D0_post <- D0
D0_post$sys_id[D0_post$party_ind == 1] <- 1
y1_post <- wtp_calc(D0_post)
y_post <- subset(y1_post, party == 1)
View(y_post)
print((y_merged$WTP_s_wt-y_party$WTP_s_wt)/(y_party$WTP_s_wt))
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s))
View(y_pre)
y_pre <- aggregate(list(WTP_s = y_pre$WTP_s, WTP_s_wt = y_pre$WTP_s_wt, N_s=y_pre$N_s),by=list(y_party=y_pre$party),sum)
View(y_pre)
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s))
print("% Change in WTP")
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100)
devtools::document()
devtools::build()
devtools::build_manual()
install.packages("~/Projects/R_packages/healthcare.antitrust_0.1.2.tar.gz", repos = NULL, type = "source")
library("healthcare.antitrust", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::build()
devtools::build_manual()
usethis::use_build_ignore("cran-comments.md")
check()
devtools::check()
N <- 1200
N_drg <- 4
drg <- sample(N_drg, size = N, replace = TRUE)
age <- sample(c(30,40,50,60), size = N, replace = TRUE)
zip5 <- sample(c(53130,53131,53132), size = N, replace = TRUE, prob = c(.4,.4,.2))
H <- 8
K <- 3
# calculate utilities
util = matrix(0, nrow = N, ncol = H)
drg_val <- matrix(runif(N_drg*H) , nrow = N_drg, ncol = H)
for (h in 1:H) {
util[,h] <-  drg_val[drg,h] + runif(N)
}
hosp_id <- max.col(util)
discharge_data <- data.frame(drg, age, zip5, hosp_id)
discharge_data$hospital <- paste0("Hospital ",hosp_id)
discharge_data$sys_id <- hosp_id
discharge_data$sys_id[discharge_data$hosp_id==2] <- 1
discharge_data$sys_id[discharge_data$hosp_id==4] <- 3
discharge_data$system <- paste0("System ",discharge_data$sys_id)
#save(discharge_data,file="data/discharge_data.RData")
usethis::use_data(discharge_data, overwrite = TRUE)
tabulate(discharge_data$hosp_id)
discharge_data %>%
group_by(drg,age,zip5) %>%
summarize(freq = n())
library(dplyr)
N <- 1200
N_drg <- 4
drg <- sample(N_drg, size = N, replace = TRUE)
age <- sample(c(30,40,50,60), size = N, replace = TRUE)
zip5 <- sample(c(53130,53131,53132), size = N, replace = TRUE, prob = c(.4,.4,.2))
H <- 8
K <- 3
# calculate utilities
util = matrix(0, nrow = N, ncol = H)
drg_val <- matrix(runif(N_drg*H) , nrow = N_drg, ncol = H)
for (h in 1:H) {
util[,h] <-  drg_val[drg,h] + runif(N)
}
hosp_id <- max.col(util)
discharge_data <- data.frame(drg, age, zip5, hosp_id)
discharge_data$hospital <- paste0("Hospital ",hosp_id)
discharge_data$sys_id <- hosp_id
discharge_data$sys_id[discharge_data$hosp_id==2] <- 1
discharge_data$sys_id[discharge_data$hosp_id==4] <- 3
discharge_data$system <- paste0("System ",discharge_data$sys_id)
#save(discharge_data,file="data/discharge_data.RData")
usethis::use_data(discharge_data, overwrite = TRUE)
tabulate(discharge_data$hosp_id)
discharge_data %>%
group_by(drg,age,zip5) %>%
summarize(freq = n())
View(discharge_data)
View(discharge_data)
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build()
devtools::load_all()
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
D0 <- outList$dataset
print(nrow(D0))
print(nrow(discharge_data))
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
print(result$sys_level)
testfxn <- function(D, hosp_id = "hosp_id") {
names(D)
}
D1 <- D0
testfxn(D1)
testfxn <- function(D, hosp_id = "hosp_id") {
names(D)
print(hosp_id)
class(hosp_id)
}
testfxn(D1)
testfxn <- function(D, hosp_id = "hosp_id") {
print(names(D))
print(hosp_id)
class(hosp_id)
}
testfxn(D1)
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id_alt"
testfxn(D1)
print(test)
print("test")
testfxn <- function(D, hosp_id = "hosp_id") {
print(names(D))
print(hosp_id)
class(hosp_id)
names(D1)[names(D1) == hosp_id] <- "hosp_id"
print(names(D))
}
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id_alt"
testfxn(D1)
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id_alt"
testfxn(D1)
testfxn(D1, hosp_id = "hosp_id_alt")
testfxn <- function(D, hosp_id = "hosp_id") {
print(names(D))
print(hosp_id)
class(hosp_id)
names(D1)[names(D1) == hosp_id] <- "hosp_id"
print(names(D))
}
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id_alt"
testfxn(D1)
testfxn(D1, hosp_id = "hosp_id_alt")
testfxn <- function(D, hosp_id = "hosp_id") {
print(names(D))
names(D)[names(D) == hosp_id] <- "hosp_id"
print(names(D))
}
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id_alt"
testfxn(D1)
testfxn(D1, hosp_id = "hosp_id_alt")
testfxn <- function(D, hosp_id = "hosp_id") {
print(names(D))
names(D)[names(D) == hosp_id] <- "hosp_id"
print(names(D))
}
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
testfxn(D1)
testfxn(D1, hosp_id = "hosp_id2")
devtools::check()
devtools::check()
