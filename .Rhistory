outList <- cell_defn(scalar,th,layers)
outList <- cell_defn(discharge_data,s_min = "th",layers)
outList <- cell_defn(discharge_data,c(20,25),layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
# This should assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
# This should give msg and assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 0, and 314. 0 Excluded.
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 314, and 0 obs. 0 Excluded.
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
# D0 <- outList$dataset             # new way
D0 <- D_keep    # use standardized cell defns.
print(nrow(D0))
print(nrow(discharge_data))  # should both have 1200 obs.
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
if (sum(DR$div_from_1, na.rm = TRUE) != 1) {warning('Div ratio does not sum to 1')}
print(result$sys_level)
#checkdiv1_h <- result$hosp_level
#checkdiv1_s <- result$sys_level
#save(checkdiv1_h, checkdiv1_s, file = "../package_testing.RData")
load(file = "../package_testing.RData")
if (!identical(result$hosp_level,checkdiv1_h)) {warning('Hosp div ratio changed')}
if (!identical(result$sys_level,checkdiv1_s)) {warning('Sys div ratio changed')}
#### Test with a different name for variables
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
D1$system <- NULL
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
if (!identical(result$sys_level$div_from_sys_1,checkdiv1_s$div_from_sys_1)) {warning('Sys div ratio changed')}
##### Test with a degenerate cell
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 29] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
########################
###### Testing wtp_calc
########################
#D0$weight <- 1
out <- wtp_calc(D0)
y_pre <- subset(out, party == 1)
D0_post <- D0
D0_post$sys_id[D0_post$party_ind == 1] <- 1
out <- wtp_calc(D0_post)
y_post <- subset(out, party == 1)
y_pre_save <- y_pre
y_pre <- aggregate(list(WTP_s = y_pre$WTP_s, WTP_s_wt = y_pre$WTP_s_wt, N_s=y_pre$N_s),by=list(y_party=y_pre$party),sum)
print("% Change in WTP")
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100)
d_WTP <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#checkWTP1 <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#save(checkWTP1, y_pre_save, y_post, file = "../package_testing_wtp.RData")
load(file = "../package_testing_wtp.RData")
if (d_WTP != checkWTP1) {warning('WTP result has changed')}
#### Test with a different name for variables
names(D0)[names(D0) == "cell"] <- "cell2"
names(D0)[names(D0) == "sys_id"] <- "sys_id2"
names(D0)[names(D0) == "party_ind"] <- "party_ind2"
names(D0)[names(D0) == "adm"] <- "adm2"
out <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2")
y_pre_names <- subset(out, party == 1)
if (!identical(y_pre_names, y_pre_save)) {warning('WTP error handling var names')}
#### Test weight variable
D0$weight2 <- runif(dim(D0)[1],.5,1.5)
check_res <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2", weight = "weight2")
View(check_res)
devtools::load_all()
rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
# This should assign 886, 154, and 160 obs. 0 Excluded Obs.
# Keep this assignment to use in div_calc testing
D_keep <- outList$dataset
### Check the error checks for min cell size
scalar <- 5
outList <- cell_defn(scalar,th,layers)
outList <- cell_defn(discharge_data,s_min = "th",layers)
outList <- cell_defn(discharge_data,c(20,25),layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
# This should assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
# This should give msg and assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 0, and 314. 0 Excluded.
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 314, and 0 obs. 0 Excluded.
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
# D0 <- outList$dataset             # new way
D0 <- D_keep    # use standardized cell defns.
print(nrow(D0))
print(nrow(discharge_data))  # should both have 1200 obs.
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
if (sum(DR$div_from_1, na.rm = TRUE) != 1) {warning('Div ratio does not sum to 1')}
print(result$sys_level)
#checkdiv1_h <- result$hosp_level
#checkdiv1_s <- result$sys_level
#save(checkdiv1_h, checkdiv1_s, file = "../package_testing.RData")
load(file = "../package_testing.RData")
if (!identical(result$hosp_level,checkdiv1_h)) {warning('Hosp div ratio changed')}
if (!identical(result$sys_level,checkdiv1_s)) {warning('Sys div ratio changed')}
#### Test with a different name for variables
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
D1$system <- NULL
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
if (!identical(result$sys_level$div_from_sys_1,checkdiv1_s$div_from_sys_1)) {warning('Sys div ratio changed')}
##### Test with a degenerate cell
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 29] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
########################
###### Testing wtp_calc
########################
#D0$weight <- 1
out <- wtp_calc(D0)
y_pre <- subset(out, party == 1)
D0_post <- D0
D0_post$sys_id[D0_post$party_ind == 1] <- 1
out <- wtp_calc(D0_post)
y_post <- subset(out, party == 1)
y_pre_save <- y_pre
y_pre <- aggregate(list(WTP_s = y_pre$WTP_s, WTP_s_wt = y_pre$WTP_s_wt, N_s=y_pre$N_s),by=list(y_party=y_pre$party),sum)
print("% Change in WTP")
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100)
d_WTP <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#checkWTP1 <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#save(checkWTP1, y_pre_save, y_post, file = "../package_testing_wtp.RData")
load(file = "../package_testing_wtp.RData")
if (d_WTP != checkWTP1) {warning('WTP result has changed')}
#### Test with a different name for variables
names(D0)[names(D0) == "cell"] <- "cell2"
names(D0)[names(D0) == "sys_id"] <- "sys_id2"
names(D0)[names(D0) == "party_ind"] <- "party_ind2"
names(D0)[names(D0) == "adm"] <- "adm2"
out <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2")
y_pre_names <- subset(out, party == 1)
if (!identical(y_pre_names, y_pre_save)) {warning('WTP error handling var names')}
#### Test weight variable
D0$weight2 <- runif(dim(D0)[1],.5,1.5)
check_res <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2", weight = "weight2")
View(check_res)
View(y_pre_save)
devtools::load_all()
rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
# This should assign 886, 154, and 160 obs. 0 Excluded Obs.
# Keep this assignment to use in div_calc testing
D_keep <- outList$dataset
### Check the error checks for min cell size
scalar <- 5
outList <- cell_defn(scalar,th,layers)
outList <- cell_defn(discharge_data,s_min = "th",layers)
outList <- cell_defn(discharge_data,c(20,25),layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
# This should assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
# This should give msg and assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 0, and 314. 0 Excluded.
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 314, and 0 obs. 0 Excluded.
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
# D0 <- outList$dataset             # new way
D0 <- D_keep    # use standardized cell defns.
print(nrow(D0))
print(nrow(discharge_data))  # should both have 1200 obs.
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
if (sum(DR$div_from_1, na.rm = TRUE) != 1) {warning('Div ratio does not sum to 1')}
print(result$sys_level)
#checkdiv1_h <- result$hosp_level
#checkdiv1_s <- result$sys_level
#save(checkdiv1_h, checkdiv1_s, file = "../package_testing.RData")
load(file = "../package_testing.RData")
if (!identical(result$hosp_level,checkdiv1_h)) {warning('Hosp div ratio changed')}
if (!identical(result$sys_level,checkdiv1_s)) {warning('Sys div ratio changed')}
#### Test with a different name for variables
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
D1$system <- NULL
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
if (!identical(result$sys_level$div_from_sys_1,checkdiv1_s$div_from_sys_1)) {warning('Sys div ratio changed')}
##### Test with a degenerate cell
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 29] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
########################
###### Testing wtp_calc
########################
#D0$weight <- 1
out <- wtp_calc(D0)
y_pre <- subset(out, party == 1)
D0_post <- D0
D0_post$sys_id[D0_post$party_ind == 1] <- 1
out <- wtp_calc(D0_post)
y_post <- subset(out, party == 1)
y_pre_save <- y_pre
y_pre <- aggregate(list(WTP_s = y_pre$WTP_s, WTP_s_wt = y_pre$WTP_s_wt, N_s=y_pre$N_s),by=list(y_party=y_pre$party),sum)
print("% Change in WTP")
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100)
d_WTP <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#checkWTP1 <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#save(checkWTP1, y_pre_save, y_post, file = "../package_testing_wtp.RData")
load(file = "../package_testing_wtp.RData")
if (d_WTP != checkWTP1) {warning('WTP result has changed')}
#### Test with a different name for variables
names(D0)[names(D0) == "cell"] <- "cell2"
names(D0)[names(D0) == "sys_id"] <- "sys_id2"
names(D0)[names(D0) == "party_ind"] <- "party_ind2"
names(D0)[names(D0) == "adm"] <- "adm2"
out <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2")
y_pre_names <- subset(out, party == 1)
if (!identical(y_pre_names, y_pre_save)) {warning('WTP error handling var names')}
#### Test weight variable
D0$weight2 <- runif(dim(D0)[1],.5,1.5)
check_res <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2", weight = "weight2")
devtools::load_all()
rm(list=ls())
data(discharge_data, package = "healthcare.antitrust")
discharge_data$adm <- 1
########################
###### Testing cell_defn
########################
###### works with several layers of any name
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
# This should assign 886, 154, and 160 obs. 0 Excluded Obs.
# Keep this assignment to use in div_calc testing
D_keep <- outList$dataset
### Check the error checks for min cell size
scalar <- 5
outList <- cell_defn(scalar,th,layers)
outList <- cell_defn(discharge_data,s_min = "th",layers)
outList <- cell_defn(discharge_data,c(20,25),layers)
###### works if adm variable has a different name
D0 <- discharge_data
names(D0)[names(D0) == "adm"] <- "count"
outList <- cell_defn(D0,th,layers,adm = "count")
# This should assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works if adm missing
D0$count <- NULL
outList <- cell_defn(D0,th,layers)
# This should give msg and assign 886, 154, and 160 obs. 0 Excluded Obs.
###### works with layers that allocate no obs
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip5")
list4 <- c("zip3")
layers <- list(list2, list3, list4)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 0, and 314. 0 Excluded.
###### works with layers run after all cells allocated
th <- 25
discharge_data$zip3 <- floor(discharge_data$zip5/100)
list2 <- c("drg","age","zip5")
list3 <- c("drg","age","zip3")
list4 <- c("zip3")
layers <- list(list2, list4, list3)
outList <- cell_defn(discharge_data,th,layers)
# Should assign 886, 314, and 0 obs. 0 Excluded.
########################
###### Testing div_calc
########################
# D0 <- as.data.frame(outList[1])   # old way, still works
# D0 <- outList$dataset             # new way
D0 <- D_keep    # use standardized cell defns.
print(nrow(D0))
print(nrow(discharge_data))  # should both have 1200 obs.
D0$party_ind <- 0
D0$party_ind[D0$hosp_id==1] <- 1
D0$party_ind[D0$hosp_id==2] <- 1
D0$party_ind[D0$hosp_id==5] <- 1
result <- div_calc(D0)
DR <- result$hosp_level
print(DR)
sum(DR$div_from_1, na.rm = TRUE)
if (sum(DR$div_from_1, na.rm = TRUE) != 1) {warning('Div ratio does not sum to 1')}
print(result$sys_level)
#checkdiv1_h <- result$hosp_level
#checkdiv1_s <- result$sys_level
#save(checkdiv1_h, checkdiv1_s, file = "../package_testing.RData")
load(file = "../package_testing.RData")
if (!identical(result$hosp_level,checkdiv1_h)) {warning('Hosp div ratio changed')}
if (!identical(result$sys_level,checkdiv1_s)) {warning('Sys div ratio changed')}
#### Test with a different name for variables
D1 <- D0
names(D1)[names(D1) == "hosp_id"] <- "hosp_id2"
names(D1)[names(D1) == "sys_id"] <- "sys_id2"
names(D1)[names(D1) == "party_ind"] <- "in_party"
D1$system <- NULL
result <- div_calc(D1, hosp_id = "hosp_id2", sys_id = "sys_id2", party_ind = "in_party")
DR <- result$hosp_level
print(result$sys_level)
if (!identical(result$sys_level$div_from_sys_1,checkdiv1_s$div_from_sys_1)) {warning('Sys div ratio changed')}
##### Test with a degenerate cell
D1 <- D0
D1$cell[D1$hosp_id == 3 & D1$cell == 29] <- 999
D1$party_ind[D1$hosp_id==3] <- 1
result <- div_calc(D1, dropDegenerateCell = FALSE)
result <- div_calc(D1, dropDegenerateCell = TRUE)
DR <- result$hosp_level
########################
###### Testing wtp_calc
########################
#D0$weight <- 1
out <- wtp_calc(D0)
y_pre <- subset(out, party == 1)
D0_post <- D0
D0_post$sys_id[D0_post$party_ind == 1] <- 1
out <- wtp_calc(D0_post)
y_post <- subset(out, party == 1)
y_pre_save <- y_pre
y_pre <- aggregate(list(WTP_s = y_pre$WTP_s, WTP_s_wt = y_pre$WTP_s_wt, N_s=y_pre$N_s),by=list(y_party=y_pre$party),sum)
print("% Change in WTP")
print((y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100)
d_WTP <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#checkWTP1 <- (y_post$WTP_s-y_pre$WTP_s)/(y_pre$WTP_s)*100
#save(checkWTP1, y_pre_save, y_post, file = "../package_testing_wtp.RData")
load(file = "../package_testing_wtp.RData")
if (d_WTP != checkWTP1) {warning('WTP result has changed')}
#### Test with a different name for variables
names(D0)[names(D0) == "cell"] <- "cell2"
names(D0)[names(D0) == "sys_id"] <- "sys_id2"
names(D0)[names(D0) == "party_ind"] <- "party_ind2"
names(D0)[names(D0) == "adm"] <- "adm2"
out <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2")
y_pre_names <- subset(out, party == 1)
if (!identical(y_pre_names, y_pre_save)) {warning('WTP error handling var names')}
#### Test weight variable
D0$weight2 <- runif(dim(D0)[1],.5,1.5)
check_res <- wtp_calc(D0, cell = "cell2", sys_id = "sys_id2",
party_ind = "party_ind2",
adm = "adm2", weight = "weight2")
getwd()
cd("/Users/mattpanhans/Projects/AllPayerRateSetting/Network Project/code⁩")
setwd("/Users/mattpanhans/Projects/AllPayerRateSetting/Network Project/code⁩")
setwd("/Users/mattpanhans/⁩")
setwd("/Users/mattpanhans⁩")
setwd("/Users/mattpanhans")
setwd("/Users/mattpanhans/Projects/AllPayerRateSetting/Network Project/code⁩")
setwd("/Users/mattpanhans/Projects/AllPayerRateSetting/Network Project/code")
install.packages("tidyverse")
load(tidyverse)
cigna_2015 <- readxl("/Users/mattpanhans/Dropbox (Personal)/Insurance Networks/CO Network data/2014 ACA NETWORK LISTINGS/MEDICAL 2014/CIGNA IND 2014/Cigna IND- Provider Directory 2014.xlsx")
load(readxl)
library(readxl)
cigna_2014 <- readxl("/Users/mattpanhans/Dropbox (Personal)/Insurance Networks/CO Network data/2014 ACA NETWORK LISTINGS/MEDICAL 2014/CIGNA IND 2014/Cigna IND- Provider Directory 2014.xlsx")
library(readxl)
cigna_2014 <- readxl("/Users/mattpanhans/Dropbox (Personal)/Insurance Networks/CO Network data/2014 ACA NETWORK LISTINGS/MEDICAL 2014/CIGNA IND 2014/Cigna IND- Provider Directory 2014.xlsx")
cigna_2014 <- read_excel("/Users/mattpanhans/Dropbox (Personal)/Insurance Networks/CO Network data/2014 ACA NETWORK LISTINGS/MEDICAL 2014/CIGNA IND 2014/Cigna IND- Provider Directory 2014.xlsx")
View(cigna_2014)
tabulate(cigna_2014$PR_SPEC_CD_DESC)
table(cigna_2014$PR_SPEC_CD_DESC)
cigna_2014 <- cigna_2014[[PR_SPEC_CD_DESC == NA]]
cigna_2014 <- cigna_2014[[cigna_2014$PR_SPEC_CD_DESC == NA]]
cigna_2014 <- cigna_2014[cigna_2014$PR_SPEC_CD_DESC == NA]
cigna_2014 <- cigna_2014[is.na(cigna_2014$PR_SPEC_CD_DESC), ]
View(cigna_2014)
cigna_2014 <- cigna_2014[!is.na(cigna_2014$FULL_PROV_NM), ]
cigna_2014 <- subset(cigna_2014, select = c(FULL_PROV_NM,FRST_LN_ADDR, CITY_NM, COUNTY))
cigna_2014[cigna_2014$CITY_NM == "GREELEY"]
cigna_2014[cigna_2014$CITY_NM == "GREELEY",]
